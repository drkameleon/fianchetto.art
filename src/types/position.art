;===============================================
; Fianchetto
;
; Chess-aware components, custom types,
; FEN & PGN parsing & more...
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;==========================================================
; @file: src/types/position.art
;==========================================================

;------------------------------
; Type definition
;------------------------------

define :chessPosition [

    ;------------------------------
    ; Constructor
    ;------------------------------

    init: method [
        source :string      ; use given FEN string/file
               :null        ; initialize with default starting board
    ][
        fenSrc: source ?? "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
        parts: split.by:" " read fenSrc
        ensure.that:"FEN string format is valid" -> 6 = size parts

        \board: to :chessBoard []!
        ranks: split.by:"/" parts\0
        ensure.that:"Invalid number of ranks in FEN" -> 8 = size ranks

        ; Parse board position from top (rank 8) to bottom (rank 1)
        loop.with:'rankIndex ranks 'rank [
            fileIndex: 0
            loop split rank 'ch [
                switch numeric? ch -> fileIndex: fileIndex + to :integer ch [
                    coords: to :chessCoords [@[
                        to :char (to :integer 'a') + fileIndex,  ; file (a-h)
                        8 - rankIndex                            ; rank (8 down to 1)
                    ]]!
                    piece: to :chessPiece [ch]!
                    \board\setPiece coords piece
                    inc 'fileIndex
                ]
            ]
        ]

        \activeColor: switch parts\1 = "w" -> 'white -> 'black  ; active color
        \castling: parts\2                                      ; castling
        \enPassant: parts\3                                     ; en passant
        \halfmove: to :integer parts\4                          ; halfmove clock
        \fullmove: to :integer parts\5                          ; fullmove number
    ]

    ;------------------------------
    ; Helpers
    ;------------------------------

    sign: function [num :integer][
        if zero? num -> return 0
        if num < 0 -> return neg 1
        return 1
    ]

    ;------------------------------
    ; Methods
    ;------------------------------

    checkStraightPath: method [newMove :chessMove][
        fromFile: newMove\fromSq\file
        fromRank: newMove\fromSq\rank
        toFile: newMove\toSq\file
        toRank: newMove\toSq\rank
        
        fileStep: \sign (to :integer toFile) - (to :integer fromFile)
        rankStep: \sign toRank - fromRank
        
        currentFile: fromFile
        currentRank: fromRank
        
        while [or? [currentFile <> toFile]
                   [currentRank <> toRank]][
            currentFile: to :char (to :integer currentFile) + fileStep
            currentRank: currentRank + rankStep
            
            if and? [currentFile <> toFile]
                    [currentRank <> toRank][
                unless null? \board\getPiece to :chessCoords [currentFile currentRank] 
                    -> return false
            ]
        ]
        
        return true
    ]

    checkDiagonalPath: method [newMove :chessMove][
        fromFile: newMove\fromSq\file
        fromRank: newMove\fromSq\rank
        toFile: newMove\toSq\file
        toRank: newMove\toSq\rank
        
        fileStep: \sign (to :integer toFile) - (to :integer fromFile)
        rankStep: \sign toRank - fromRank
        
        currentFile: fromFile
        currentRank: fromRank
        
        while [currentFile <> toFile] [
            currentFile: to :char (to :integer currentFile) + fileStep
            currentRank: currentRank + rankStep
            
            if currentFile <> toFile [
                unless null? \board\getPiece to :chessCoords [currentFile currentRank]
                    -> return false
            ]
        ]
        
        return true
    ]

    ; Validate if a move is legal in current position
    validateMove: method [newMove :chessMove][
        ; 1. Basic piece existence and color check
        piece: \board\getPiece newMove\fromSq!
        
        if null? piece [
            print "No piece at source square"
            return false
        ]
        
        if piece\color <> \activeColor [
            print "Wrong color to move"
            return false
        ]

        ; 2. Check if piece at destination is not same color
        destPiece: \board\getPiece newMove\toSq
        unless null? destPiece [
            if destPiece\color = piece\color [
                print "Cannot capture own piece"
                return false
            ]
        ]
        
        ; 3. Get move pattern from piece
        pattern: piece\getMovePattern newMove\fromSq newMove\toSq

        ; 4. Basic pattern validation
        unless pattern\valid? [
            print "Invalid move pattern for this piece"
            return false
        ]

        ; 5. Path validation if needed
        if pattern\needsClear? [
            pathClear?: (key? pattern 'pathType)?[
                case pattern\pathType [
                    'straight -> \checkStraightPath newMove
                    'diagonal -> \checkDiagonalPath newMove
                ]
            ] -> true  ; For pieces like pawns that only need simple clearing

            unless pathClear? [
                print "Path is blocked"
                return false
            ]
        ]

        ; 6. Special move validation
        case pattern\type [
            'pawn [
                switch pattern\needsCapture? [
                    if null? destPiece [
                        ; Check for en passant
                        if and? [pattern\allowsEnPassant?]
                                [\enPassant <> "-"][
                            
                            epSquare: to :chessCoords [\enPassant]!
                            return same? newMove\toSq epSquare
                        ]
                        print "No piece to capture diagonally"
                        return false
                    ]
                ][
                    unless null? destPiece [
                        print "Cannot move pawn forward into occupied square"
                        return false
                    ]
                ]
            ]

            'king [
                if pattern\allowsCastling? [
                    ; Validate castling rights
                    castlingFlag: (piece\white?) ? -> "K" -> "k"
                    unless contains? \castling castlingFlag [
                        print "Castling rights not available"
                        return false
                    ]
                ]
            ]
        ]

        return true
    ]

    ; Create a new position after applying the move
    applyMove: method [newMove :chessMove][
        ; Create new position with same properties
        newPos: new this
            
        ; Get and copy the piece we're moving
        piece: \board\getPiece newMove\fromSq
        piece: to :chessPiece [to :string piece]! ; Create new copy of piece
            
        ; Clear source square and set destination square
        newPos\board\setPiece newMove\fromSq ø
        newPos\board\setPiece newMove\toSq piece 

        ; Update position details
        newPos\activeColor: (\activeColor = 'white)? -> 'black -> 'white
        newPos\fullmove: (\activeColor = 'black)? -> \fullmove + 1 -> \fullmove

        return newPos
    ]

    ;------------------------------
    ; Magic
    ;------------------------------

    string: method [][
        colorNotation: (\activeColor = 'white)? -> "w" -> "b"

        join.with:" " @[
            \board\notation
            colorNotation
            \castling
            \enPassant
            to :string \halfmove
            to :string \fullmove
        ]
    ]
]