;===============================================
; Fianchetto
;
; Chess-aware components, custom types,
; FEN & PGN parsing & more...
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;==========================================================
; @file: src/types/board.art
;==========================================================

;------------------------------
; Imports
;------------------------------

import 'tabular!

;------------------------------
; Type definition
;------------------------------

define :chessBoard ::

    ;------------------------------
    ; Constructor
    ;------------------------------

    init: method [][
        ; Initialize a 64-element array for the board
        ; squares[0] = a1, squares[1] = b1, ..., squares[63] = h8
        \squares: array.of:64 ø       ; create array with 64 null elements
    ]

    ;------------------------------
    ; Methods
    ;------------------------------

    ; Get piece at coordinates
    getPiece: method [coords :chessCoords][
        \squares\[coords\index]
    ]

    ; Set piece at coordinates (null to clear)
    setPiece: method [coords :chessCoords piece :null :chessPiece][
        \squares\[coords\index]: piece
    ]

    ; Convert board to FEN notation 
    notation: method [][
        result: ""
        emptyCount: 0
        
        loop 0..63 'idx [
            ; Start new rank at every 8th square
            if and? [idx > 0][0 = idx % 8][
                if emptyCount > 0 [
                    result: result ++ to :string emptyCount
                    emptyCount: 0
                ]
                result: result ++ "/"
            ]

            piece: \squares\[63 - idx]  ; Reverse index to start from top rank
            
            switch null? piece -> inc 'emptyCount [
                if emptyCount > 0 [
                    result: result ++ to :string emptyCount
                    emptyCount: 0
                ]
                result: result ++ to :string piece
            ]
        ]
        
        ; Handle any remaining empty squares
        if emptyCount > 0 [
            result: result ++ to :string emptyCount
        ]

        result
    ]

    ;------------------------------
    ; Magic
    ;------------------------------

    string: method [][
        rows: []
        currentRow: []

        loop 0..63 'idx [
            piece: \squares\[idx]
            'currentRow ++ ((null? piece)? -> "-" -> to :string piece)

            ; Complete row after every 8 squares
            if 7 = idx % 8 [
                'rows ++ @[currentRow]
                currentRow: []
            ]
        ]

        reverse 'rows  ; Flip board to show white at bottom
        tabular.align:'center .padding:0 rows
    ]