;===============================================
; Fianchetto
;
; Chess-aware components, custom types,
; FEN & PGN parsing & more...
; for Arturo
;
; MIT License
; (c) 2024 Yanis ZafirÃ³pulos
;==========================================================
; @file: src/types/coords.art
;==========================================================

;------------------------------
; Type definition
;------------------------------

define :chessCoords ::

    ;------------------------------
    ; Constructor
    ;------------------------------

    init: method [
        coords :string      ; e.g. "e4"
               :block       ; e.g. ['e' 4]
               :integer     ; e.g. 28 (index)
    ][
        switch integer? coords [
            ; Convert index (0-63) to file/rank
            ensure.that:"Index is within valid range" -> in? coords 0..63
            
            \file: to :char (coords % 8) + to :integer 'a'
            \rank: inc coords / 8
        ][
            ensure.that:"Coordinates' size is valid" -> 2 = size coords
            
            \file: coords\0
            \rank: coords\1

            unless integer? \rank ->
                \rank: to :integer to :string \rank
        ]
        ensure.that:"Coordinate file is valid" -> in? \file 'a'..'h' 
        ensure.that:"Coordinate rank is valid" -> in? \rank 1..8
    ]

    ;------------------------------
    ; Methods
    ;------------------------------

    index: method [][
        fileIndex: (to :integer \file) - to :integer 'a'
        rankIndex: dec \rank
        fileIndex + rankIndex * 8
    ]

    ;------------------------------
    ; Magic
    ;------------------------------

    string: method [][
        join @[\file to :string \rank]
    ]